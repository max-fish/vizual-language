/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.vizual.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VizGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHtmlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMainTagsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainTagsMainTagParserRuleCall_1_0 = (RuleCall)cMainTagsAssignment_1.eContents().get(0);
		
		//Model:
		//	"html" mainTags+=MainTag*;
		@Override public ParserRule getRule() { return rule; }
		
		//"html" mainTags+=MainTag*
		public Group getGroup() { return cGroup; }
		
		//"html"
		public Keyword getHtmlKeyword_0() { return cHtmlKeyword_0; }
		
		//mainTags+=MainTag*
		public Assignment getMainTagsAssignment_1() { return cMainTagsAssignment_1; }
		
		//MainTag
		public RuleCall getMainTagsMainTagParserRuleCall_1_0() { return cMainTagsMainTagParserRuleCall_1_0; }
	}
	public class MainTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.MainTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainTagNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMainTagNameMainTagNameEnumRuleCall_0_0 = (RuleCall)cMainTagNameAssignment_0.eContents().get(0);
		private final Assignment cNormalTagsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNormalTagsNormalTagParserRuleCall_1_0 = (RuleCall)cNormalTagsAssignment_1.eContents().get(0);
		
		//MainTag:
		//	mainTagName=MainTagName normalTags+=NormalTag*;
		@Override public ParserRule getRule() { return rule; }
		
		//mainTagName=MainTagName normalTags+=NormalTag*
		public Group getGroup() { return cGroup; }
		
		//mainTagName=MainTagName
		public Assignment getMainTagNameAssignment_0() { return cMainTagNameAssignment_0; }
		
		//MainTagName
		public RuleCall getMainTagNameMainTagNameEnumRuleCall_0_0() { return cMainTagNameMainTagNameEnumRuleCall_0_0; }
		
		//normalTags+=NormalTag*
		public Assignment getNormalTagsAssignment_1() { return cNormalTagsAssignment_1; }
		
		//NormalTag
		public RuleCall getNormalTagsNormalTagParserRuleCall_1_0() { return cNormalTagsNormalTagParserRuleCall_1_0; }
	}
	public class NormalTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.NormalTag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainerTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NormalTag:
		//	TextTag | ContainerTag;
		@Override public ParserRule getRule() { return rule; }
		
		//TextTag | ContainerTag
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextTag
		public RuleCall getTextTagParserRuleCall_0() { return cTextTagParserRuleCall_0; }
		
		//ContainerTag
		public RuleCall getContainerTagParserRuleCall_1() { return cContainerTagParserRuleCall_1; }
	}
	public class TextTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TextTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cH1Keyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cH2Keyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cH3Keyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cH4Keyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cH5Keyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cH6Keyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final Keyword cPKeyword_0_6 = (Keyword)cAlternatives_0.eContents().get(6);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TextTag:
		//	("h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p") name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//("h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p") name=ID
		public Group getGroup() { return cGroup; }
		
		//("h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"h1"
		public Keyword getH1Keyword_0_0() { return cH1Keyword_0_0; }
		
		//"h2"
		public Keyword getH2Keyword_0_1() { return cH2Keyword_0_1; }
		
		//"h3"
		public Keyword getH3Keyword_0_2() { return cH3Keyword_0_2; }
		
		//"h4"
		public Keyword getH4Keyword_0_3() { return cH4Keyword_0_3; }
		
		//"h5"
		public Keyword getH5Keyword_0_4() { return cH5Keyword_0_4; }
		
		//"h6"
		public Keyword getH6Keyword_0_5() { return cH6Keyword_0_5; }
		
		//"p"
		public Keyword getPKeyword_0_6() { return cPKeyword_0_6; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ContainerTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.ContainerTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContainerTagAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDivKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNormalTagsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNormalTagsNormalTagParserRuleCall_2_0 = (RuleCall)cNormalTagsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ContainerTag:
		//	{ContainerTag} "div" normalTags+=NormalTag* "end";
		@Override public ParserRule getRule() { return rule; }
		
		//{ContainerTag} "div" normalTags+=NormalTag* "end"
		public Group getGroup() { return cGroup; }
		
		//{ContainerTag}
		public Action getContainerTagAction_0() { return cContainerTagAction_0; }
		
		//"div"
		public Keyword getDivKeyword_1() { return cDivKeyword_1; }
		
		//normalTags+=NormalTag*
		public Assignment getNormalTagsAssignment_2() { return cNormalTagsAssignment_2; }
		
		//NormalTag
		public RuleCall getNormalTagsNormalTagParserRuleCall_2_0() { return cNormalTagsNormalTagParserRuleCall_2_0; }
		
		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	
	public class MainTagNameElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.MainTagName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHeadEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHeadHeadKeyword_0_0 = (Keyword)cHeadEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBodyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBodyBodyKeyword_1_0 = (Keyword)cBodyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MainTagName:
		//	head | body;
		public EnumRule getRule() { return rule; }
		
		//head | body
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//head
		public EnumLiteralDeclaration getHeadEnumLiteralDeclaration_0() { return cHeadEnumLiteralDeclaration_0; }
		
		//"head"
		public Keyword getHeadHeadKeyword_0_0() { return cHeadHeadKeyword_0_0; }
		
		//body
		public EnumLiteralDeclaration getBodyEnumLiteralDeclaration_1() { return cBodyEnumLiteralDeclaration_1; }
		
		//"body"
		public Keyword getBodyBodyKeyword_1_0() { return cBodyBodyKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final MainTagElements pMainTag;
	private final NormalTagElements pNormalTag;
	private final TextTagElements pTextTag;
	private final ContainerTagElements pContainerTag;
	private final MainTagNameElements eMainTagName;
	private final TerminalRule tNEW_LINE;
	private final TerminalRule tTAB_SPACE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VizGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pMainTag = new MainTagElements();
		this.pNormalTag = new NormalTagElements();
		this.pTextTag = new TextTagElements();
		this.pContainerTag = new ContainerTagElements();
		this.eMainTagName = new MainTagNameElements();
		this.tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.NEW_LINE");
		this.tTAB_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TAB_SPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.vizual.Viz".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"html" mainTags+=MainTag*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//MainTag:
	//	mainTagName=MainTagName normalTags+=NormalTag*;
	public MainTagElements getMainTagAccess() {
		return pMainTag;
	}
	
	public ParserRule getMainTagRule() {
		return getMainTagAccess().getRule();
	}
	
	//NormalTag:
	//	TextTag | ContainerTag;
	public NormalTagElements getNormalTagAccess() {
		return pNormalTag;
	}
	
	public ParserRule getNormalTagRule() {
		return getNormalTagAccess().getRule();
	}
	
	//TextTag:
	//	("h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "p") name=ID;
	public TextTagElements getTextTagAccess() {
		return pTextTag;
	}
	
	public ParserRule getTextTagRule() {
		return getTextTagAccess().getRule();
	}
	
	//ContainerTag:
	//	{ContainerTag} "div" normalTags+=NormalTag* "end";
	public ContainerTagElements getContainerTagAccess() {
		return pContainerTag;
	}
	
	public ParserRule getContainerTagRule() {
		return getContainerTagAccess().getRule();
	}
	
	//enum MainTagName:
	//	head | body;
	public MainTagNameElements getMainTagNameAccess() {
		return eMainTagName;
	}
	
	public EnumRule getMainTagNameRule() {
		return getMainTagNameAccess().getRule();
	}
	
	//terminal NEW_LINE:
	//	"\n";
	public TerminalRule getNEW_LINERule() {
		return tNEW_LINE;
	}
	
	//terminal TAB_SPACE:
	//	'\t';
	public TerminalRule getTAB_SPACERule() {
		return tTAB_SPACE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
