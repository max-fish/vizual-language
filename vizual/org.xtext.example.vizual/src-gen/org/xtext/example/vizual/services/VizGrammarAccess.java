/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.vizual.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VizGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//	commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInitializerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cHtmlAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cHtmlHtmlCommandEnumRuleCall_1_0 = (RuleCall)cHtmlAssignment_1.eContents().get(0);
		private final Assignment cEndHtmlAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEndHtmlEndHtmlCommandEnumRuleCall_2_0 = (RuleCall)cEndHtmlAssignment_2.eContents().get(0);
		private final RuleCall cHeadCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBodyCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCommonCommandParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Command:
		//	Initializer | html=HtmlCommand | endHtml=EndHtmlCommand | HeadCommand | BodyCommand | CommonCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//Initializer | html=HtmlCommand | endHtml=EndHtmlCommand | HeadCommand | BodyCommand | CommonCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Initializer
		public RuleCall getInitializerParserRuleCall_0() { return cInitializerParserRuleCall_0; }
		
		//html=HtmlCommand
		public Assignment getHtmlAssignment_1() { return cHtmlAssignment_1; }
		
		//HtmlCommand
		public RuleCall getHtmlHtmlCommandEnumRuleCall_1_0() { return cHtmlHtmlCommandEnumRuleCall_1_0; }
		
		//endHtml=EndHtmlCommand
		public Assignment getEndHtmlAssignment_2() { return cEndHtmlAssignment_2; }
		
		//EndHtmlCommand
		public RuleCall getEndHtmlEndHtmlCommandEnumRuleCall_2_0() { return cEndHtmlEndHtmlCommandEnumRuleCall_2_0; }
		
		//HeadCommand
		public RuleCall getHeadCommandParserRuleCall_3() { return cHeadCommandParserRuleCall_3; }
		
		//BodyCommand
		public RuleCall getBodyCommandParserRuleCall_4() { return cBodyCommandParserRuleCall_4; }
		
		//CommonCommand
		public RuleCall getCommonCommandParserRuleCall_5() { return cCommonCommandParserRuleCall_5; }
	}
	public class HeadCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.HeadCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleTitleCommandParserRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		
		//HeadCommand:
		//	'head' title=TitleCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//'head' title=TitleCommand
		public Group getGroup() { return cGroup; }
		
		//'head'
		public Keyword getHeadKeyword_0() { return cHeadKeyword_0; }
		
		//title=TitleCommand
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//TitleCommand
		public RuleCall getTitleTitleCommandParserRuleCall_1_0() { return cTitleTitleCommandParserRuleCall_1_0; }
	}
	public class BodyCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.BodyCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChildrenCommonCommandParserRuleCall_3_0 = (RuleCall)cChildrenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BodyCommand:
		//	{BodyCommand} 'body' '{' children+=CommonCommand* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BodyCommand} 'body' '{' children+=CommonCommand* '}'
		public Group getGroup() { return cGroup; }
		
		//{BodyCommand}
		public Action getBodyCommandAction_0() { return cBodyCommandAction_0; }
		
		//'body'
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//children+=CommonCommand*
		public Assignment getChildrenAssignment_3() { return cChildrenAssignment_3; }
		
		//CommonCommand
		public RuleCall getChildrenCommonCommandParserRuleCall_3_0() { return cChildrenCommonCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TitleCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TitleCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//TitleCommand:
		//	'title' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'title' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'title'
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class CommonCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.CommonCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTableCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTableRowParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTableHeaderParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTableDataParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDropDownCommandParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBulletPointCommandParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNumberedListCommandParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//CommonCommand:
		//	Create | TextCommand | TableCommand | DivCommand | TableRow | TableHeader | TableData | DropDownCommand |
		//	BulletPointCommand | NumberedListCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//Create | TextCommand | TableCommand | DivCommand | TableRow | TableHeader | TableData | DropDownCommand |
		//BulletPointCommand | NumberedListCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Create
		public RuleCall getCreateParserRuleCall_0() { return cCreateParserRuleCall_0; }
		
		//TextCommand
		public RuleCall getTextCommandParserRuleCall_1() { return cTextCommandParserRuleCall_1; }
		
		//TableCommand
		public RuleCall getTableCommandParserRuleCall_2() { return cTableCommandParserRuleCall_2; }
		
		//DivCommand
		public RuleCall getDivCommandParserRuleCall_3() { return cDivCommandParserRuleCall_3; }
		
		//TableRow
		public RuleCall getTableRowParserRuleCall_4() { return cTableRowParserRuleCall_4; }
		
		//TableHeader
		public RuleCall getTableHeaderParserRuleCall_5() { return cTableHeaderParserRuleCall_5; }
		
		//TableData
		public RuleCall getTableDataParserRuleCall_6() { return cTableDataParserRuleCall_6; }
		
		//DropDownCommand
		public RuleCall getDropDownCommandParserRuleCall_7() { return cDropDownCommandParserRuleCall_7; }
		
		//BulletPointCommand
		public RuleCall getBulletPointCommandParserRuleCall_8() { return cBulletPointCommandParserRuleCall_8; }
		
		//NumberedListCommand
		public RuleCall getNumberedListCommandParserRuleCall_9() { return cNumberedListCommandParserRuleCall_9; }
	}
	public class DivCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.DivCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDivAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDivDivParserRuleCall_0_0 = (RuleCall)cDivAssignment_0.eContents().get(0);
		private final Assignment cDivTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDivTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cDivTextAssignment_1.eContents().get(0);
		
		//DivCommand:
		//	div=Div divText=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//div=Div divText=STRING
		public Group getGroup() { return cGroup; }
		
		//div=Div
		public Assignment getDivAssignment_0() { return cDivAssignment_0; }
		
		//Div
		public RuleCall getDivDivParserRuleCall_0_0() { return cDivDivParserRuleCall_0_0; }
		
		//divText=STRING
		public Assignment getDivTextAssignment_1() { return cDivTextAssignment_1; }
		
		//STRING
		public RuleCall getDivTextSTRINGTerminalRuleCall_1_0() { return cDivTextSTRINGTerminalRuleCall_1_0; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCreateBulletPointsEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBulletsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBulletsSTRINGTerminalRuleCall_2_0 = (RuleCall)cBulletsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Create:
		//	command=CreateBulletPoints 'with(' bullets=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//command=CreateBulletPoints 'with(' bullets=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//command=CreateBulletPoints
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//CreateBulletPoints
		public RuleCall getCommandCreateBulletPointsEnumRuleCall_0_0() { return cCommandCreateBulletPointsEnumRuleCall_0_0; }
		
		//'with('
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//bullets=STRING
		public Assignment getBulletsAssignment_2() { return cBulletsAssignment_2; }
		
		//STRING
		public RuleCall getBulletsSTRINGTerminalRuleCall_2_0() { return cBulletsSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TextCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TextCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadingTextHeadingParserRuleCall_0_0 = (RuleCall)cHeadingAssignment_0.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//TextCommand:
		//	heading=TextHeading text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//heading=TextHeading text=STRING
		public Group getGroup() { return cGroup; }
		
		//heading=TextHeading
		public Assignment getHeadingAssignment_0() { return cHeadingAssignment_0; }
		
		//TextHeading
		public RuleCall getHeadingTextHeadingParserRuleCall_0_0() { return cHeadingTextHeadingParserRuleCall_0_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Div");
		private final Assignment cDivisionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDivisionDefaultDivParserRuleCall_0 = (RuleCall)cDivisionAssignment.eContents().get(0);
		
		//Div:
		//	Division=defaultDiv;
		@Override public ParserRule getRule() { return rule; }
		
		//Division=defaultDiv
		public Assignment getDivisionAssignment() { return cDivisionAssignment; }
		
		//defaultDiv
		public RuleCall getDivisionDefaultDivParserRuleCall_0() { return cDivisionDefaultDivParserRuleCall_0; }
	}
	public class DefaultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.defaultDiv");
		private final Keyword cDivKeyword = (Keyword)rule.eContents().get(1);
		
		//defaultDiv:
		//	'div';
		@Override public ParserRule getRule() { return rule; }
		
		//'div'
		public Keyword getDivKeyword() { return cDivKeyword; }
	}
	public class TextHeadingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TextHeading");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cH1Keyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cH2Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cH3Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cH4Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cH5Keyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cH6Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cPKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//TextHeading:
		//	'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
		@Override public ParserRule getRule() { return rule; }
		
		//'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'h1'
		public Keyword getH1Keyword_0() { return cH1Keyword_0; }
		
		//'h2'
		public Keyword getH2Keyword_1() { return cH2Keyword_1; }
		
		//'h3'
		public Keyword getH3Keyword_2() { return cH3Keyword_2; }
		
		//'h4'
		public Keyword getH4Keyword_3() { return cH4Keyword_3; }
		
		//'h5'
		public Keyword getH5Keyword_4() { return cH5Keyword_4; }
		
		//'h6'
		public Keyword getH6Keyword_5() { return cH6Keyword_5; }
		
		//'p'
		public Keyword getPKeyword_6() { return cPKeyword_6; }
	}
	public class TableCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TableCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowsTableRowParserRuleCall_3_0 = (RuleCall)cRowsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TableCommand:
		//	{TableCommand} 'table' '{' rows+=TableRow* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TableCommand} 'table' '{' rows+=TableRow* '}'
		public Group getGroup() { return cGroup; }
		
		//{TableCommand}
		public Action getTableCommandAction_0() { return cTableCommandAction_0; }
		
		//'table'
		public Keyword getTableKeyword_1() { return cTableKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//rows+=TableRow*
		public Assignment getRowsAssignment_3() { return cRowsAssignment_3; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_3_0() { return cRowsTableRowParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cDataAlternatives_3_0 = (Alternatives)cDataAssignment_3.eContents().get(0);
		private final RuleCall cDataTableDataParserRuleCall_3_0_0 = (RuleCall)cDataAlternatives_3_0.eContents().get(0);
		private final RuleCall cDataTableHeaderParserRuleCall_3_0_1 = (RuleCall)cDataAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TableRow:
		//	{TableRow} 'tr' '{' data+=(TableData | TableHeader)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{TableRow} 'tr' '{' data+=(TableData | TableHeader)* '}'
		public Group getGroup() { return cGroup; }
		
		//{TableRow}
		public Action getTableRowAction_0() { return cTableRowAction_0; }
		
		//'tr'
		public Keyword getTrKeyword_1() { return cTrKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//data+=(TableData | TableHeader)*
		public Assignment getDataAssignment_3() { return cDataAssignment_3; }
		
		//(TableData | TableHeader)
		public Alternatives getDataAlternatives_3_0() { return cDataAlternatives_3_0; }
		
		//TableData
		public RuleCall getDataTableDataParserRuleCall_3_0_0() { return cDataTableDataParserRuleCall_3_0_0; }
		
		//TableHeader
		public RuleCall getDataTableHeaderParserRuleCall_3_0_1() { return cDataTableHeaderParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TableHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TableHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//TableHeader:
		//	'th' text=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'th' text=STRING
		public Group getGroup() { return cGroup; }
		
		//'th'
		public Keyword getThKeyword_0() { return cThKeyword_0; }
		
		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}
	public class TableDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TableData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDataValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cDataValueAssignment_1.eContents().get(0);
		
		//TableData:
		//	'td' dataValue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'td' dataValue=STRING
		public Group getGroup() { return cGroup; }
		
		//'td'
		public Keyword getTdKeyword_0() { return cTdKeyword_0; }
		
		//dataValue=STRING
		public Assignment getDataValueAssignment_1() { return cDataValueAssignment_1; }
		
		//STRING
		public RuleCall getDataValueSTRINGTerminalRuleCall_1_0() { return cDataValueSTRINGTerminalRuleCall_1_0; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoctypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLangAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLangHtmlKeyword_1_0 = (Keyword)cLangAssignment_1.eContents().get(0);
		
		//Initializer:
		//	'doctype' lang='html';
		@Override public ParserRule getRule() { return rule; }
		
		//'doctype' lang='html'
		public Group getGroup() { return cGroup; }
		
		//'doctype'
		public Keyword getDoctypeKeyword_0() { return cDoctypeKeyword_0; }
		
		//lang='html'
		public Assignment getLangAssignment_1() { return cLangAssignment_1; }
		
		//'html'
		public Keyword getLangHtmlKeyword_1_0() { return cLangHtmlKeyword_1_0; }
	}
	public class DropDownCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.DropDownCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDropDownSelectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLabelKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cOptionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOptionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptionsSTRINGTerminalRuleCall_6_0 = (RuleCall)cOptionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DropDownCommand:
		//	'DropDownSelection' '{' 'label' label=STRING 'options' '{' options+=STRING* '}' '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DropDownSelection' '{' 'label' label=STRING 'options' '{' options+=STRING* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'DropDownSelection'
		public Keyword getDropDownSelectionKeyword_0() { return cDropDownSelectionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'label'
		public Keyword getLabelKeyword_2() { return cLabelKeyword_2; }
		
		//label=STRING
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }
		
		//'options'
		public Keyword getOptionsKeyword_4() { return cOptionsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//options+=STRING*
		public Assignment getOptionsAssignment_6() { return cOptionsAssignment_6; }
		
		//STRING
		public RuleCall getOptionsSTRINGTerminalRuleCall_6_0() { return cOptionsSTRINGTerminalRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class BulletPointCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.BulletPointCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBulletPointCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBulletPointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChildrenTextCommandParserRuleCall_3_0 = (RuleCall)cChildrenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BulletPointCommand:
		//	{BulletPointCommand} 'BulletPoint' '{' children+=TextCommand* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BulletPointCommand} 'BulletPoint' '{' children+=TextCommand* '}'
		public Group getGroup() { return cGroup; }
		
		//{BulletPointCommand}
		public Action getBulletPointCommandAction_0() { return cBulletPointCommandAction_0; }
		
		//'BulletPoint'
		public Keyword getBulletPointKeyword_1() { return cBulletPointKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//children+=TextCommand*
		public Assignment getChildrenAssignment_3() { return cChildrenAssignment_3; }
		
		//TextCommand
		public RuleCall getChildrenTextCommandParserRuleCall_3_0() { return cChildrenTextCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class NumberedListCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.NumberedListCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberedListCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberedListKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cChildrenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChildrenTextCommandParserRuleCall_3_0 = (RuleCall)cChildrenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NumberedListCommand:
		//	{NumberedListCommand} 'NumberedList' '{' children+=TextCommand* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberedListCommand} 'NumberedList' '{' children+=TextCommand* '}'
		public Group getGroup() { return cGroup; }
		
		//{NumberedListCommand}
		public Action getNumberedListCommandAction_0() { return cNumberedListCommandAction_0; }
		
		//'NumberedList'
		public Keyword getNumberedListKeyword_1() { return cNumberedListKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//children+=TextCommand*
		public Assignment getChildrenAssignment_3() { return cChildrenAssignment_3; }
		
		//TextCommand
		public RuleCall getChildrenTextCommandParserRuleCall_3_0() { return cChildrenTextCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class HtmlCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.HtmlCommand");
		private final EnumLiteralDeclaration cHTMLEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cHTMLHtmlKeyword_0 = (Keyword)cHTMLEnumLiteralDeclaration.eContents().get(0);
		
		//enum HtmlCommand:
		//	HTML='html';
		public EnumRule getRule() { return rule; }
		
		//HTML='html'
		public EnumLiteralDeclaration getHTMLEnumLiteralDeclaration() { return cHTMLEnumLiteralDeclaration; }
		
		//'html'
		public Keyword getHTMLHtmlKeyword_0() { return cHTMLHtmlKeyword_0; }
	}
	public class EndHtmlCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.EndHtmlCommand");
		private final EnumLiteralDeclaration cEndHTMLEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cEndHTMLEndHtmlKeyword_0 = (Keyword)cEndHTMLEnumLiteralDeclaration.eContents().get(0);
		
		//enum EndHtmlCommand:
		//	endHTML='endHtml';
		public EnumRule getRule() { return rule; }
		
		//endHTML='endHtml'
		public EnumLiteralDeclaration getEndHTMLEnumLiteralDeclaration() { return cEndHTMLEnumLiteralDeclaration; }
		
		//'endHtml'
		public Keyword getEndHTMLEndHtmlKeyword_0() { return cEndHTMLEndHtmlKeyword_0; }
	}
	public class CreateBulletPointsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.CreateBulletPoints");
		private final EnumLiteralDeclaration cBPEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBPBPKeyword_0 = (Keyword)cBPEnumLiteralDeclaration.eContents().get(0);
		
		//enum CreateBulletPoints:
		//	BP;
		public EnumRule getRule() { return rule; }
		
		//BP
		public EnumLiteralDeclaration getBPEnumLiteralDeclaration() { return cBPEnumLiteralDeclaration; }
		
		//'BP'
		public Keyword getBPBPKeyword_0() { return cBPBPKeyword_0; }
	}
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final HtmlCommandElements eHtmlCommand;
	private final EndHtmlCommandElements eEndHtmlCommand;
	private final HeadCommandElements pHeadCommand;
	private final BodyCommandElements pBodyCommand;
	private final TitleCommandElements pTitleCommand;
	private final CommonCommandElements pCommonCommand;
	private final DivCommandElements pDivCommand;
	private final CreateElements pCreate;
	private final TextCommandElements pTextCommand;
	private final CreateBulletPointsElements eCreateBulletPoints;
	private final DivElements pDiv;
	private final DefaultDivElements pDefaultDiv;
	private final TextHeadingElements pTextHeading;
	private final TableCommandElements pTableCommand;
	private final TableRowElements pTableRow;
	private final TableHeaderElements pTableHeader;
	private final TableDataElements pTableData;
	private final InitializerElements pInitializer;
	private final DropDownCommandElements pDropDownCommand;
	private final BulletPointCommandElements pBulletPointCommand;
	private final NumberedListCommandElements pNumberedListCommand;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VizGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.eHtmlCommand = new HtmlCommandElements();
		this.eEndHtmlCommand = new EndHtmlCommandElements();
		this.pHeadCommand = new HeadCommandElements();
		this.pBodyCommand = new BodyCommandElements();
		this.pTitleCommand = new TitleCommandElements();
		this.pCommonCommand = new CommonCommandElements();
		this.pDivCommand = new DivCommandElements();
		this.pCreate = new CreateElements();
		this.pTextCommand = new TextCommandElements();
		this.eCreateBulletPoints = new CreateBulletPointsElements();
		this.pDiv = new DivElements();
		this.pDefaultDiv = new DefaultDivElements();
		this.pTextHeading = new TextHeadingElements();
		this.pTableCommand = new TableCommandElements();
		this.pTableRow = new TableRowElements();
		this.pTableHeader = new TableHeaderElements();
		this.pTableData = new TableDataElements();
		this.pInitializer = new InitializerElements();
		this.pDropDownCommand = new DropDownCommandElements();
		this.pBulletPointCommand = new BulletPointCommandElements();
		this.pNumberedListCommand = new NumberedListCommandElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.vizual.Viz".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command:
	//	Initializer | html=HtmlCommand | endHtml=EndHtmlCommand | HeadCommand | BodyCommand | CommonCommand;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//enum HtmlCommand:
	//	HTML='html';
	public HtmlCommandElements getHtmlCommandAccess() {
		return eHtmlCommand;
	}
	
	public EnumRule getHtmlCommandRule() {
		return getHtmlCommandAccess().getRule();
	}
	
	//enum EndHtmlCommand:
	//	endHTML='endHtml';
	public EndHtmlCommandElements getEndHtmlCommandAccess() {
		return eEndHtmlCommand;
	}
	
	public EnumRule getEndHtmlCommandRule() {
		return getEndHtmlCommandAccess().getRule();
	}
	
	//HeadCommand:
	//	'head' title=TitleCommand;
	public HeadCommandElements getHeadCommandAccess() {
		return pHeadCommand;
	}
	
	public ParserRule getHeadCommandRule() {
		return getHeadCommandAccess().getRule();
	}
	
	//BodyCommand:
	//	{BodyCommand} 'body' '{' children+=CommonCommand* '}';
	public BodyCommandElements getBodyCommandAccess() {
		return pBodyCommand;
	}
	
	public ParserRule getBodyCommandRule() {
		return getBodyCommandAccess().getRule();
	}
	
	//TitleCommand:
	//	'title' text=STRING;
	public TitleCommandElements getTitleCommandAccess() {
		return pTitleCommand;
	}
	
	public ParserRule getTitleCommandRule() {
		return getTitleCommandAccess().getRule();
	}
	
	//CommonCommand:
	//	Create | TextCommand | TableCommand | DivCommand | TableRow | TableHeader | TableData | DropDownCommand |
	//	BulletPointCommand | NumberedListCommand;
	public CommonCommandElements getCommonCommandAccess() {
		return pCommonCommand;
	}
	
	public ParserRule getCommonCommandRule() {
		return getCommonCommandAccess().getRule();
	}
	
	//DivCommand:
	//	div=Div divText=STRING;
	public DivCommandElements getDivCommandAccess() {
		return pDivCommand;
	}
	
	public ParserRule getDivCommandRule() {
		return getDivCommandAccess().getRule();
	}
	
	//Create:
	//	command=CreateBulletPoints 'with(' bullets=STRING ')';
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//TextCommand:
	//	heading=TextHeading text=STRING;
	public TextCommandElements getTextCommandAccess() {
		return pTextCommand;
	}
	
	public ParserRule getTextCommandRule() {
		return getTextCommandAccess().getRule();
	}
	
	//enum CreateBulletPoints:
	//	BP;
	public CreateBulletPointsElements getCreateBulletPointsAccess() {
		return eCreateBulletPoints;
	}
	
	public EnumRule getCreateBulletPointsRule() {
		return getCreateBulletPointsAccess().getRule();
	}
	
	//Div:
	//	Division=defaultDiv;
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//defaultDiv:
	//	'div';
	public DefaultDivElements getDefaultDivAccess() {
		return pDefaultDiv;
	}
	
	public ParserRule getDefaultDivRule() {
		return getDefaultDivAccess().getRule();
	}
	
	//TextHeading:
	//	'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
	public TextHeadingElements getTextHeadingAccess() {
		return pTextHeading;
	}
	
	public ParserRule getTextHeadingRule() {
		return getTextHeadingAccess().getRule();
	}
	
	//TableCommand:
	//	{TableCommand} 'table' '{' rows+=TableRow* '}';
	public TableCommandElements getTableCommandAccess() {
		return pTableCommand;
	}
	
	public ParserRule getTableCommandRule() {
		return getTableCommandAccess().getRule();
	}
	
	//TableRow:
	//	{TableRow} 'tr' '{' data+=(TableData | TableHeader)* '}';
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TableHeader:
	//	'th' text=STRING;
	public TableHeaderElements getTableHeaderAccess() {
		return pTableHeader;
	}
	
	public ParserRule getTableHeaderRule() {
		return getTableHeaderAccess().getRule();
	}
	
	//TableData:
	//	'td' dataValue=STRING;
	public TableDataElements getTableDataAccess() {
		return pTableData;
	}
	
	public ParserRule getTableDataRule() {
		return getTableDataAccess().getRule();
	}
	
	//Initializer:
	//	'doctype' lang='html';
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	//DropDownCommand:
	//	'DropDownSelection' '{' 'label' label=STRING 'options' '{' options+=STRING* '}' '}';
	public DropDownCommandElements getDropDownCommandAccess() {
		return pDropDownCommand;
	}
	
	public ParserRule getDropDownCommandRule() {
		return getDropDownCommandAccess().getRule();
	}
	
	//BulletPointCommand:
	//	{BulletPointCommand} 'BulletPoint' '{' children+=TextCommand* '}';
	public BulletPointCommandElements getBulletPointCommandAccess() {
		return pBulletPointCommand;
	}
	
	public ParserRule getBulletPointCommandRule() {
		return getBulletPointCommandAccess().getRule();
	}
	
	//NumberedListCommand:
	//	{NumberedListCommand} 'NumberedList' '{' children+=TextCommand* '}';
	public NumberedListCommandElements getNumberedListCommandAccess() {
		return pNumberedListCommand;
	}
	
	public ParserRule getNumberedListCommandRule() {
		return getNumberedListCommandAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
