/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.vizual.viz.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.vizual.viz.Div;
import org.xtext.example.vizual.viz.DivCommand;
import org.xtext.example.vizual.viz.VizPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Div Command</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.vizual.viz.impl.DivCommandImpl#getDiv <em>Div</em>}</li>
 *   <li>{@link org.xtext.example.vizual.viz.impl.DivCommandImpl#getDivText <em>Div Text</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DivCommandImpl extends CommonCommandImpl implements DivCommand
{
  /**
   * The cached value of the '{@link #getDiv() <em>Div</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiv()
   * @generated
   * @ordered
   */
  protected Div div;

  /**
   * The default value of the '{@link #getDivText() <em>Div Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDivText()
   * @generated
   * @ordered
   */
  protected static final String DIV_TEXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDivText() <em>Div Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDivText()
   * @generated
   * @ordered
   */
  protected String divText = DIV_TEXT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DivCommandImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VizPackage.Literals.DIV_COMMAND;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Div getDiv()
  {
    return div;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDiv(Div newDiv, NotificationChain msgs)
  {
    Div oldDiv = div;
    div = newDiv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, VizPackage.DIV_COMMAND__DIV, oldDiv, newDiv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDiv(Div newDiv)
  {
    if (newDiv != div)
    {
      NotificationChain msgs = null;
      if (div != null)
        msgs = ((InternalEObject)div).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - VizPackage.DIV_COMMAND__DIV, null, msgs);
      if (newDiv != null)
        msgs = ((InternalEObject)newDiv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - VizPackage.DIV_COMMAND__DIV, null, msgs);
      msgs = basicSetDiv(newDiv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VizPackage.DIV_COMMAND__DIV, newDiv, newDiv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDivText()
  {
    return divText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDivText(String newDivText)
  {
    String oldDivText = divText;
    divText = newDivText;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VizPackage.DIV_COMMAND__DIV_TEXT, oldDivText, divText));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VizPackage.DIV_COMMAND__DIV:
        return basicSetDiv(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VizPackage.DIV_COMMAND__DIV:
        return getDiv();
      case VizPackage.DIV_COMMAND__DIV_TEXT:
        return getDivText();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VizPackage.DIV_COMMAND__DIV:
        setDiv((Div)newValue);
        return;
      case VizPackage.DIV_COMMAND__DIV_TEXT:
        setDivText((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VizPackage.DIV_COMMAND__DIV:
        setDiv((Div)null);
        return;
      case VizPackage.DIV_COMMAND__DIV_TEXT:
        setDivText(DIV_TEXT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VizPackage.DIV_COMMAND__DIV:
        return div != null;
      case VizPackage.DIV_COMMAND__DIV_TEXT:
        return DIV_TEXT_EDEFAULT == null ? divText != null : !DIV_TEXT_EDEFAULT.equals(divText);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (divText: ");
    result.append(divText);
    result.append(')');
    return result.toString();
  }

} //DivCommandImpl
