/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.vizual.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VizGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		//Model:
		//    commands+=Command*;
		@Override public ParserRule getRule() { return rule; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenerateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//    Create|Generate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Create|Generate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Create
		public RuleCall getCreateParserRuleCall_0() { return cCreateParserRuleCall_0; }
		
		//Generate
		public RuleCall getGenerateParserRuleCall_1() { return cGenerateParserRuleCall_1; }
	}
	public class CreateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Create");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandCreateBulletPointsEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBulletsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBulletsSTRINGTerminalRuleCall_2_0 = (RuleCall)cBulletsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Create:
		//    command = CreateBulletPoints 'with(' bullets=STRING ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command = CreateBulletPoints 'with(' bullets=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//command = CreateBulletPoints
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//CreateBulletPoints
		public RuleCall getCommandCreateBulletPointsEnumRuleCall_0_0() { return cCommandCreateBulletPointsEnumRuleCall_0_0; }
		
		//'with('
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }
		
		//bullets=STRING
		public Assignment getBulletsAssignment_2() { return cBulletsAssignment_2; }
		
		//STRING
		public RuleCall getBulletsSTRINGTerminalRuleCall_2_0() { return cBulletsSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class GenerateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.Generate");
		private final Assignment cCommandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandGenerateDefaultEnumRuleCall_0 = (RuleCall)cCommandAssignment.eContents().get(0);
		
		//Generate:
		//    command = GenerateDefault
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command = GenerateDefault
		public Assignment getCommandAssignment() { return cCommandAssignment; }
		
		//GenerateDefault
		public RuleCall getCommandGenerateDefaultEnumRuleCall_0() { return cCommandGenerateDefaultEnumRuleCall_0; }
	}
	
	public class CreateBulletPointsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.CreateBulletPoints");
		private final EnumLiteralDeclaration cBPEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBPBPKeyword_0 = (Keyword)cBPEnumLiteralDeclaration.eContents().get(0);
		
		//enum CreateBulletPoints:
		//    BP = 'BP'
		//;
		public EnumRule getRule() { return rule; }
		
		//BP = 'BP'
		public EnumLiteralDeclaration getBPEnumLiteralDeclaration() { return cBPEnumLiteralDeclaration; }
		
		//'BP'
		public Keyword getBPBPKeyword_0() { return cBPBPKeyword_0; }
	}
	public class GenerateDefaultElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.GenerateDefault");
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDefaultGenerateDefaultDocumentKeyword_0 = (Keyword)cDefaultEnumLiteralDeclaration.eContents().get(0);
		
		//enum GenerateDefault:
		//    default='GenerateDefaultDocument'
		//;
		public EnumRule getRule() { return rule; }
		
		//default='GenerateDefaultDocument'
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration() { return cDefaultEnumLiteralDeclaration; }
		
		//'GenerateDefaultDocument'
		public Keyword getDefaultGenerateDefaultDocumentKeyword_0() { return cDefaultGenerateDefaultDocumentKeyword_0; }
	}
	
	private final ModelElements pModel;
	private final CommandElements pCommand;
	private final CreateElements pCreate;
	private final CreateBulletPointsElements eCreateBulletPoints;
	private final GenerateElements pGenerate;
	private final GenerateDefaultElements eGenerateDefault;
	private final TerminalRule tNEW_LINE;
	private final TerminalRule tTAB_SPACE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VizGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCommand = new CommandElements();
		this.pCreate = new CreateElements();
		this.eCreateBulletPoints = new CreateBulletPointsElements();
		this.pGenerate = new GenerateElements();
		this.eGenerateDefault = new GenerateDefaultElements();
		this.tNEW_LINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.NEW_LINE");
		this.tTAB_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.vizual.Viz.TAB_SPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.vizual.Viz".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    commands+=Command*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Command:
	//    Create|Generate
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Create:
	//    command = CreateBulletPoints 'with(' bullets=STRING ')'
	//;
	public CreateElements getCreateAccess() {
		return pCreate;
	}
	
	public ParserRule getCreateRule() {
		return getCreateAccess().getRule();
	}
	
	//enum CreateBulletPoints:
	//    BP = 'BP'
	//;
	public CreateBulletPointsElements getCreateBulletPointsAccess() {
		return eCreateBulletPoints;
	}
	
	public EnumRule getCreateBulletPointsRule() {
		return getCreateBulletPointsAccess().getRule();
	}
	
	//Generate:
	//    command = GenerateDefault
	//;
	public GenerateElements getGenerateAccess() {
		return pGenerate;
	}
	
	public ParserRule getGenerateRule() {
		return getGenerateAccess().getRule();
	}
	
	//enum GenerateDefault:
	//    default='GenerateDefaultDocument'
	//;
	public GenerateDefaultElements getGenerateDefaultAccess() {
		return eGenerateDefault;
	}
	
	public EnumRule getGenerateDefaultRule() {
		return getGenerateDefaultAccess().getRule();
	}
	
	//terminal NEW_LINE:
	//    "\n"
	//;
	public TerminalRule getNEW_LINERule() {
		return tNEW_LINE;
	}
	
	//terminal TAB_SPACE:
	//    '\t'
	//;
	public TerminalRule getTAB_SPACERule() {
		return tTAB_SPACE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
