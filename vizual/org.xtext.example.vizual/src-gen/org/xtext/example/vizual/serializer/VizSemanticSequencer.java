/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.vizual.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.vizual.services.VizGrammarAccess;
import org.xtext.example.vizual.viz.BodyCommand;
import org.xtext.example.vizual.viz.BulletPointCommand;
import org.xtext.example.vizual.viz.Command;
import org.xtext.example.vizual.viz.Create;
import org.xtext.example.vizual.viz.Div;
import org.xtext.example.vizual.viz.DivCommand;
import org.xtext.example.vizual.viz.DropDownCommand;
import org.xtext.example.vizual.viz.HeadCommand;
import org.xtext.example.vizual.viz.Initializer;
import org.xtext.example.vizual.viz.Model;
import org.xtext.example.vizual.viz.NumberedListCommand;
import org.xtext.example.vizual.viz.TableCommand;
import org.xtext.example.vizual.viz.TableData;
import org.xtext.example.vizual.viz.TableHeader;
import org.xtext.example.vizual.viz.TableRow;
import org.xtext.example.vizual.viz.TextCommand;
import org.xtext.example.vizual.viz.TitleCommand;
import org.xtext.example.vizual.viz.VizPackage;

@SuppressWarnings("all")
public class VizSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VizGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VizPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VizPackage.BODY_COMMAND:
				sequence_BodyCommand(context, (BodyCommand) semanticObject); 
				return; 
			case VizPackage.BULLET_POINT_COMMAND:
				sequence_BulletPointCommand(context, (BulletPointCommand) semanticObject); 
				return; 
			case VizPackage.COMMAND:
				sequence_Command(context, (Command) semanticObject); 
				return; 
			case VizPackage.CREATE:
				sequence_Create(context, (Create) semanticObject); 
				return; 
			case VizPackage.DIV:
				sequence_Div(context, (Div) semanticObject); 
				return; 
			case VizPackage.DIV_COMMAND:
				sequence_DivCommand(context, (DivCommand) semanticObject); 
				return; 
			case VizPackage.DROP_DOWN_COMMAND:
				sequence_DropDownCommand(context, (DropDownCommand) semanticObject); 
				return; 
			case VizPackage.HEAD_COMMAND:
				sequence_HeadCommand(context, (HeadCommand) semanticObject); 
				return; 
			case VizPackage.INITIALIZER:
				sequence_Initializer(context, (Initializer) semanticObject); 
				return; 
			case VizPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case VizPackage.NUMBERED_LIST_COMMAND:
				sequence_NumberedListCommand(context, (NumberedListCommand) semanticObject); 
				return; 
			case VizPackage.TABLE_COMMAND:
				sequence_TableCommand(context, (TableCommand) semanticObject); 
				return; 
			case VizPackage.TABLE_DATA:
				sequence_TableData(context, (TableData) semanticObject); 
				return; 
			case VizPackage.TABLE_HEADER:
				sequence_TableHeader(context, (TableHeader) semanticObject); 
				return; 
			case VizPackage.TABLE_ROW:
				sequence_TableRow(context, (TableRow) semanticObject); 
				return; 
			case VizPackage.TEXT_COMMAND:
				sequence_TextCommand(context, (TextCommand) semanticObject); 
				return; 
			case VizPackage.TITLE_COMMAND:
				sequence_TitleCommand(context, (TitleCommand) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns BodyCommand
	 *     BodyCommand returns BodyCommand
	 *
	 * Constraint:
	 *     children+=CommonCommand*
	 */
	protected void sequence_BodyCommand(ISerializationContext context, BodyCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns BulletPointCommand
	 *     CommonCommand returns BulletPointCommand
	 *     BulletPointCommand returns BulletPointCommand
	 *
	 * Constraint:
	 *     children+=TextCommand*
	 */
	protected void sequence_BulletPointCommand(ISerializationContext context, BulletPointCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Command
	 *
	 * Constraint:
	 *     (html=HtmlCommand | endHtml=EndHtmlCommand)
	 */
	protected void sequence_Command(ISerializationContext context, Command semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Create
	 *     CommonCommand returns Create
	 *     Create returns Create
	 *
	 * Constraint:
	 *     (command=CreateBulletPoints bullets=STRING)
	 */
	protected void sequence_Create(ISerializationContext context, Create semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.CREATE__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.CREATE__COMMAND));
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.CREATE__BULLETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.CREATE__BULLETS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCreateAccess().getCommandCreateBulletPointsEnumRuleCall_0_0(), semanticObject.getCommand());
		feeder.accept(grammarAccess.getCreateAccess().getBulletsSTRINGTerminalRuleCall_2_0(), semanticObject.getBullets());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns DivCommand
	 *     CommonCommand returns DivCommand
	 *     DivCommand returns DivCommand
	 *
	 * Constraint:
	 *     (div=Div divText=STRING)
	 */
	protected void sequence_DivCommand(ISerializationContext context, DivCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.DIV_COMMAND__DIV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.DIV_COMMAND__DIV));
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.DIV_COMMAND__DIV_TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.DIV_COMMAND__DIV_TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivCommandAccess().getDivDivParserRuleCall_0_0(), semanticObject.getDiv());
		feeder.accept(grammarAccess.getDivCommandAccess().getDivTextSTRINGTerminalRuleCall_1_0(), semanticObject.getDivText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Div returns Div
	 *
	 * Constraint:
	 *     Division=defaultDiv
	 */
	protected void sequence_Div(ISerializationContext context, Div semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.DIV__DIVISION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.DIV__DIVISION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivAccess().getDivisionDefaultDivParserRuleCall_0(), semanticObject.getDivision());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns DropDownCommand
	 *     CommonCommand returns DropDownCommand
	 *     DropDownCommand returns DropDownCommand
	 *
	 * Constraint:
	 *     (label=STRING options+=STRING*)
	 */
	protected void sequence_DropDownCommand(ISerializationContext context, DropDownCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns HeadCommand
	 *     HeadCommand returns HeadCommand
	 *
	 * Constraint:
	 *     title=TitleCommand
	 */
	protected void sequence_HeadCommand(ISerializationContext context, HeadCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.HEAD_COMMAND__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.HEAD_COMMAND__TITLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeadCommandAccess().getTitleTitleCommandParserRuleCall_1_0(), semanticObject.getTitle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Initializer
	 *     Initializer returns Initializer
	 *
	 * Constraint:
	 *     lang='html'
	 */
	protected void sequence_Initializer(ISerializationContext context, Initializer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.INITIALIZER__LANG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.INITIALIZER__LANG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitializerAccess().getLangHtmlKeyword_1_0(), semanticObject.getLang());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns NumberedListCommand
	 *     CommonCommand returns NumberedListCommand
	 *     NumberedListCommand returns NumberedListCommand
	 *
	 * Constraint:
	 *     children+=TextCommand*
	 */
	protected void sequence_NumberedListCommand(ISerializationContext context, NumberedListCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TableCommand
	 *     CommonCommand returns TableCommand
	 *     TableCommand returns TableCommand
	 *
	 * Constraint:
	 *     rows+=TableRow*
	 */
	protected void sequence_TableCommand(ISerializationContext context, TableCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TableData
	 *     CommonCommand returns TableData
	 *     TableData returns TableData
	 *
	 * Constraint:
	 *     dataValue=STRING
	 */
	protected void sequence_TableData(ISerializationContext context, TableData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.TABLE_DATA__DATA_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.TABLE_DATA__DATA_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableDataAccess().getDataValueSTRINGTerminalRuleCall_1_0(), semanticObject.getDataValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TableHeader
	 *     CommonCommand returns TableHeader
	 *     TableHeader returns TableHeader
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_TableHeader(ISerializationContext context, TableHeader semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.TABLE_HEADER__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.TABLE_HEADER__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableHeaderAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TableRow
	 *     CommonCommand returns TableRow
	 *     TableRow returns TableRow
	 *
	 * Constraint:
	 *     (data+=TableData | data+=TableHeader)*
	 */
	protected void sequence_TableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Command returns TextCommand
	 *     CommonCommand returns TextCommand
	 *     TextCommand returns TextCommand
	 *
	 * Constraint:
	 *     (heading=TextHeading text=STRING)
	 */
	protected void sequence_TextCommand(ISerializationContext context, TextCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.TEXT_COMMAND__HEADING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.TEXT_COMMAND__HEADING));
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.TEXT_COMMAND__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.TEXT_COMMAND__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextCommandAccess().getHeadingTextHeadingParserRuleCall_0_0(), semanticObject.getHeading());
		feeder.accept(grammarAccess.getTextCommandAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TitleCommand returns TitleCommand
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_TitleCommand(ISerializationContext context, TitleCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.TITLE_COMMAND__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.TITLE_COMMAND__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleCommandAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
}
