/*
 * generated by Xtext 2.24.0
 */
grammar InternalViz;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.vizual.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.vizual.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.vizual.services.VizGrammarAccess;

}
@parser::members {
	private VizGrammarAccess grammarAccess;

	public void setGrammarAccess(VizGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainTag
entryRuleMainTag
:
{ before(grammarAccess.getMainTagRule()); }
	 ruleMainTag
{ after(grammarAccess.getMainTagRule()); } 
	 EOF 
;

// Rule MainTag
ruleMainTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainTagAccess().getGroup()); }
		(rule__MainTag__Group__0)
		{ after(grammarAccess.getMainTagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNormalTag
entryRuleNormalTag
:
{ before(grammarAccess.getNormalTagRule()); }
	 ruleNormalTag
{ after(grammarAccess.getNormalTagRule()); } 
	 EOF 
;

// Rule NormalTag
ruleNormalTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNormalTagAccess().getAlternatives()); }
		(rule__NormalTag__Alternatives)
		{ after(grammarAccess.getNormalTagAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTextTag
entryRuleTextTag
:
{ before(grammarAccess.getTextTagRule()); }
	 ruleTextTag
{ after(grammarAccess.getTextTagRule()); } 
	 EOF 
;

// Rule TextTag
ruleTextTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTextTagAccess().getGroup()); }
		(rule__TextTag__Group__0)
		{ after(grammarAccess.getTextTagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleContainerTag
entryRuleContainerTag
:
{ before(grammarAccess.getContainerTagRule()); }
	 ruleContainerTag
{ after(grammarAccess.getContainerTagRule()); } 
	 EOF 
;

// Rule ContainerTag
ruleContainerTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getContainerTagAccess().getGroup()); }
		(rule__ContainerTag__Group__0)
		{ after(grammarAccess.getContainerTagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MainTagName
ruleMainTagName
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainTagNameAccess().getAlternatives()); }
		(rule__MainTagName__Alternatives)
		{ after(grammarAccess.getMainTagNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalTag__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNormalTagAccess().getTextTagParserRuleCall_0()); }
		ruleTextTag
		{ after(grammarAccess.getNormalTagAccess().getTextTagParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNormalTagAccess().getContainerTagParserRuleCall_1()); }
		ruleContainerTag
		{ after(grammarAccess.getNormalTagAccess().getContainerTagParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTag__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextTagAccess().getH1Keyword_0_0()); }
		'h1'
		{ after(grammarAccess.getTextTagAccess().getH1Keyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTextTagAccess().getH2Keyword_0_1()); }
		'h2'
		{ after(grammarAccess.getTextTagAccess().getH2Keyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTextTagAccess().getH3Keyword_0_2()); }
		'h3'
		{ after(grammarAccess.getTextTagAccess().getH3Keyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getTextTagAccess().getH4Keyword_0_3()); }
		'h4'
		{ after(grammarAccess.getTextTagAccess().getH4Keyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getTextTagAccess().getH5Keyword_0_4()); }
		'h5'
		{ after(grammarAccess.getTextTagAccess().getH5Keyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getTextTagAccess().getH6Keyword_0_5()); }
		'h6'
		{ after(grammarAccess.getTextTagAccess().getH6Keyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getTextTagAccess().getPKeyword_0_6()); }
		'p'
		{ after(grammarAccess.getTextTagAccess().getPKeyword_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainTagName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainTagNameAccess().getHeadEnumLiteralDeclaration_0()); }
		('head')
		{ after(grammarAccess.getMainTagNameAccess().getHeadEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMainTagNameAccess().getBodyEnumLiteralDeclaration_1()); }
		('body')
		{ after(grammarAccess.getMainTagNameAccess().getBodyEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getHtmlKeyword_0()); }
	'html'
	{ after(grammarAccess.getModelAccess().getHtmlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getMainTagsAssignment_1()); }
	(rule__Model__MainTagsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getMainTagsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainTag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainTag__Group__0__Impl
	rule__MainTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainTag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainTagAccess().getMainTagNameAssignment_0()); }
	(rule__MainTag__MainTagNameAssignment_0)
	{ after(grammarAccess.getMainTagAccess().getMainTagNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainTag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainTag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainTagAccess().getNormalTagsAssignment_1()); }
	(rule__MainTag__NormalTagsAssignment_1)*
	{ after(grammarAccess.getMainTagAccess().getNormalTagsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TextTag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextTag__Group__0__Impl
	rule__TextTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextTagAccess().getAlternatives_0()); }
	(rule__TextTag__Alternatives_0)
	{ after(grammarAccess.getTextTagAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TextTag__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTextTagAccess().getNameAssignment_1()); }
	(rule__TextTag__NameAssignment_1)
	{ after(grammarAccess.getTextTagAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ContainerTag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerTag__Group__0__Impl
	rule__ContainerTag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerTagAccess().getContainerTagAction_0()); }
	()
	{ after(grammarAccess.getContainerTagAccess().getContainerTagAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerTag__Group__1__Impl
	rule__ContainerTag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerTagAccess().getDivKeyword_1()); }
	'div'
	{ after(grammarAccess.getContainerTagAccess().getDivKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerTag__Group__2__Impl
	rule__ContainerTag__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerTagAccess().getNormalTagsAssignment_2()); }
	(rule__ContainerTag__NormalTagsAssignment_2)*
	{ after(grammarAccess.getContainerTagAccess().getNormalTagsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ContainerTag__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getContainerTagAccess().getEndKeyword_3()); }
	'end'
	{ after(grammarAccess.getContainerTagAccess().getEndKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__MainTagsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getMainTagsMainTagParserRuleCall_1_0()); }
		ruleMainTag
		{ after(grammarAccess.getModelAccess().getMainTagsMainTagParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainTag__MainTagNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainTagAccess().getMainTagNameMainTagNameEnumRuleCall_0_0()); }
		ruleMainTagName
		{ after(grammarAccess.getMainTagAccess().getMainTagNameMainTagNameEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainTag__NormalTagsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainTagAccess().getNormalTagsNormalTagParserRuleCall_1_0()); }
		ruleNormalTag
		{ after(grammarAccess.getMainTagAccess().getNormalTagsNormalTagParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TextTag__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTextTagAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTextTagAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ContainerTag__NormalTagsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getContainerTagAccess().getNormalTagsNormalTagParserRuleCall_2_0()); }
		ruleNormalTag
		{ after(grammarAccess.getContainerTagAccess().getNormalTagsNormalTagParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NEW_LINE : '\n';

RULE_TAB_SPACE : '\t';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
