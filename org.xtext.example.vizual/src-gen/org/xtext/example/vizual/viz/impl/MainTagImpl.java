/**
 * generated by Xtext 2.24.0
 */
package org.xtext.example.vizual.viz.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.vizual.viz.MainTag;
import org.xtext.example.vizual.viz.MainTagName;
import org.xtext.example.vizual.viz.NormalTag;
import org.xtext.example.vizual.viz.VizPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Main Tag</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.vizual.viz.impl.MainTagImpl#getMainTagName <em>Main Tag Name</em>}</li>
 *   <li>{@link org.xtext.example.vizual.viz.impl.MainTagImpl#getNormalTags <em>Normal Tags</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MainTagImpl extends MinimalEObjectImpl.Container implements MainTag
{
  /**
   * The default value of the '{@link #getMainTagName() <em>Main Tag Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainTagName()
   * @generated
   * @ordered
   */
  protected static final MainTagName MAIN_TAG_NAME_EDEFAULT = MainTagName.HEAD;

  /**
   * The cached value of the '{@link #getMainTagName() <em>Main Tag Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainTagName()
   * @generated
   * @ordered
   */
  protected MainTagName mainTagName = MAIN_TAG_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getNormalTags() <em>Normal Tags</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNormalTags()
   * @generated
   * @ordered
   */
  protected EList<NormalTag> normalTags;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MainTagImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return VizPackage.Literals.MAIN_TAG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MainTagName getMainTagName()
  {
    return mainTagName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainTagName(MainTagName newMainTagName)
  {
    MainTagName oldMainTagName = mainTagName;
    mainTagName = newMainTagName == null ? MAIN_TAG_NAME_EDEFAULT : newMainTagName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, VizPackage.MAIN_TAG__MAIN_TAG_NAME, oldMainTagName, mainTagName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NormalTag> getNormalTags()
  {
    if (normalTags == null)
    {
      normalTags = new EObjectContainmentEList<NormalTag>(NormalTag.class, this, VizPackage.MAIN_TAG__NORMAL_TAGS);
    }
    return normalTags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case VizPackage.MAIN_TAG__NORMAL_TAGS:
        return ((InternalEList<?>)getNormalTags()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case VizPackage.MAIN_TAG__MAIN_TAG_NAME:
        return getMainTagName();
      case VizPackage.MAIN_TAG__NORMAL_TAGS:
        return getNormalTags();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case VizPackage.MAIN_TAG__MAIN_TAG_NAME:
        setMainTagName((MainTagName)newValue);
        return;
      case VizPackage.MAIN_TAG__NORMAL_TAGS:
        getNormalTags().clear();
        getNormalTags().addAll((Collection<? extends NormalTag>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case VizPackage.MAIN_TAG__MAIN_TAG_NAME:
        setMainTagName(MAIN_TAG_NAME_EDEFAULT);
        return;
      case VizPackage.MAIN_TAG__NORMAL_TAGS:
        getNormalTags().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case VizPackage.MAIN_TAG__MAIN_TAG_NAME:
        return mainTagName != MAIN_TAG_NAME_EDEFAULT;
      case VizPackage.MAIN_TAG__NORMAL_TAGS:
        return normalTags != null && !normalTags.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (mainTagName: ");
    result.append(mainTagName);
    result.append(')');
    return result.toString();
  }

} //MainTagImpl
