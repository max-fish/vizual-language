/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.vizual.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.vizual.services.VizGrammarAccess;
import org.xtext.example.vizual.viz.Create;
import org.xtext.example.vizual.viz.Generate;
import org.xtext.example.vizual.viz.Model;
import org.xtext.example.vizual.viz.VizPackage;

@SuppressWarnings("all")
public class VizSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VizGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VizPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VizPackage.CREATE:
				sequence_Create(context, (Create) semanticObject); 
				return; 
			case VizPackage.GENERATE:
				sequence_Generate(context, (Generate) semanticObject); 
				return; 
			case VizPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Command returns Create
	 *     Create returns Create
	 *
	 * Constraint:
	 *     (command=CreateBulletPoints bullets=STRING)
	 */
	protected void sequence_Create(ISerializationContext context, Create semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.CREATE__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.CREATE__COMMAND));
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.CREATE__BULLETS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.CREATE__BULLETS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCreateAccess().getCommandCreateBulletPointsEnumRuleCall_0_0(), semanticObject.getCommand());
		feeder.accept(grammarAccess.getCreateAccess().getBulletsSTRINGTerminalRuleCall_2_0(), semanticObject.getBullets());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Command returns Generate
	 *     Generate returns Generate
	 *
	 * Constraint:
	 *     command=GenerateDefault
	 */
	protected void sequence_Generate(ISerializationContext context, Generate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.GENERATE__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.GENERATE__COMMAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGenerateAccess().getCommandGenerateDefaultEnumRuleCall_0(), semanticObject.getCommand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     commands+=Command+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
