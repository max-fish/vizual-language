/*
 * generated by Xtext 2.25.0
 */
grammar InternalViz;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.vizual.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.vizual.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.vizual.services.VizGrammarAccess;

}

@parser::members {

 	private VizGrammarAccess grammarAccess;

    public InternalVizParser(TokenStream input, VizGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected VizGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getCommandsCommandParserRuleCall_0());
			}
			lv_commands_0_0=ruleCommand
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"commands",
					lv_commands_0_0,
					"org.xtext.example.vizual.Viz.Command");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCommandAccess().getCreateParserRuleCall_0());
		}
		this_Create_0=ruleCreate
		{
			$current = $this_Create_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getGenerateParserRuleCall_1());
		}
		this_Generate_1=ruleGenerate
		{
			$current = $this_Generate_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCreate
entryRuleCreate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateRule()); }
	iv_ruleCreate=ruleCreate
	{ $current=$iv_ruleCreate.current; }
	EOF;

// Rule Create
ruleCreate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateAccess().getCommandCreateBulletPointsEnumRuleCall_0_0());
				}
				lv_command_0_0=ruleCreateBulletPoints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateRule());
					}
					set(
						$current,
						"command",
						lv_command_0_0,
						"org.xtext.example.vizual.Viz.CreateBulletPoints");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='with('
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateAccess().getWithKeyword_1());
		}
		(
			(
				lv_bullets_2_0=RULE_STRING
				{
					newLeafNode(lv_bullets_2_0, grammarAccess.getCreateAccess().getBulletsSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateRule());
					}
					setWithLastConsumed(
						$current,
						"bullets",
						lv_bullets_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleGenerate
entryRuleGenerate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenerateRule()); }
	iv_ruleGenerate=ruleGenerate
	{ $current=$iv_ruleGenerate.current; }
	EOF;

// Rule Generate
ruleGenerate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getGenerateAccess().getCommandGenerateDefaultEnumRuleCall_0());
			}
			lv_command_0_0=ruleGenerateDefault
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getGenerateRule());
				}
				set(
					$current,
					"command",
					lv_command_0_0,
					"org.xtext.example.vizual.Viz.GenerateDefault");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Rule CreateBulletPoints
ruleCreateBulletPoints returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='BP'
		{
			$current = grammarAccess.getCreateBulletPointsAccess().getBPEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getCreateBulletPointsAccess().getBPEnumLiteralDeclaration());
		}
	)
;

// Rule GenerateDefault
ruleGenerateDefault returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='GenerateDefaultDocument'
		{
			$current = grammarAccess.getGenerateDefaultAccess().getDefaultEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getGenerateDefaultAccess().getDefaultEnumLiteralDeclaration());
		}
	)
;

RULE_NEW_LINE : '\n';

RULE_TAB_SPACE : '\t';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
