/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.vizual.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.vizual.services.VizGrammarAccess;
import org.xtext.example.vizual.viz.ContainerTag;
import org.xtext.example.vizual.viz.MainTag;
import org.xtext.example.vizual.viz.Model;
import org.xtext.example.vizual.viz.TextTag;
import org.xtext.example.vizual.viz.VizPackage;

@SuppressWarnings("all")
public class VizSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VizGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VizPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VizPackage.CONTAINER_TAG:
				sequence_ContainerTag(context, (ContainerTag) semanticObject); 
				return; 
			case VizPackage.MAIN_TAG:
				sequence_MainTag(context, (MainTag) semanticObject); 
				return; 
			case VizPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case VizPackage.TEXT_TAG:
				sequence_TextTag(context, (TextTag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NormalTag returns ContainerTag
	 *     ContainerTag returns ContainerTag
	 *
	 * Constraint:
	 *     normalTags+=NormalTag*
	 */
	protected void sequence_ContainerTag(ISerializationContext context, ContainerTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MainTag returns MainTag
	 *
	 * Constraint:
	 *     (mainTagName=MainTagName normalTags+=NormalTag*)
	 */
	protected void sequence_MainTag(ISerializationContext context, MainTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     mainTags+=MainTag+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalTag returns TextTag
	 *     TextTag returns TextTag
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TextTag(ISerializationContext context, TextTag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VizPackage.Literals.TEXT_TAG__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VizPackage.Literals.TEXT_TAG__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextTagAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
